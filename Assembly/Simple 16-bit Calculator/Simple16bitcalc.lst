                 -1   $modde2
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER - HIGH BYTE
0000             24   PCON   DATA  087H  ;POWER CONTROL
0000             25   TCON   DATA  088H  ;TIMER CONTROL
0000             26   TMOD   DATA  089H  ;TIMER MODE
0000             27   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             28   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             29   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             30   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             31   P1     DATA  090H  ;PORT 1
0000             32   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             33   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             34   P2     DATA  0A0H  ;PORT 2
0000             35   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             36   P3     DATA  0B0H  ;PORT 3
0000             37   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             38   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             39   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             40   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             41   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             42   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             43   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             44   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             45   ACC    DATA  0E0H  ;ACCUMULATOR
0000             46   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             47   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             48   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             49   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             50   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             51   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             52   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             53   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             54   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             55   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             56   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             57   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             58   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             59   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             60   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             61   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             62   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             63   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             64   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             65   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             66   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             67   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             68   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             69   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             70   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             71   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             72   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             73   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             74   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             75   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             76   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             77   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             78   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             79   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             80   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             81   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             82   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             83   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             84   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             85   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             86   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             87   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             88   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             89   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             90   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             91   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             92   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             93   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             94   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             95   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             96   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000             97   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000             98   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000             99   
0000            100   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            101   ; we have the following extra registers:
0000            102   
0000            103   HEX0   DATA  091H ; Zero turns the segment on
0000            104   HEX1   DATA  092H ; 
0000            105   HEX2   DATA  093H ; 
0000            106   HEX3   DATA  094H ; 
0000            107   HEX4   DATA  08EH ;
0000            108   HEX5   DATA  08FH ;
0000            109   HEX6   DATA  096H ;
0000            110   HEX7   DATA  097H ;
0000            111   
0000            112   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            113   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            114   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            115   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            116   
0000            117   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            118   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            119   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            120   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            121   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            122   SWB    DATA  095H ; Switches SW8 to SW15
0000            123   SWC    DATA  09EH ; Switches SW16 and SW17
0000            124   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            125   
0000            126   LCD_CMD   DATA 0D8H ;
0000            127   LCD_DATA  DATA 0D9H ;
0000            128   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            129   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            130   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            131   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            132   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            133   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000              2            org 0000H
0000 020381       3            ljmp mycode
                 -1   	$include(math16.asm)  ;Includes the math16.asm file
                436   $LIST
01DD              5            
0030              6   DSEG at 30H       ; Absoulte DATA segments at fixed memory locations
0030              7            x:    ds 2    ; Reserves 2 bytes (16 bits) for x
0032              8            y:    ds 2    ; Reserves 2 bytes (16 bits) for y
0034              9            bcd:    ds 3  ; Reserves 3 bytes for BCD
0037             10            type:   ds 1  ; Reserves 1 byte (8 bits) for type
0038             11   
0000             12   BSEG              ; Absoulte BIT segments at fixed memory locations
0000             13            mf:   dbit 1  ; Reserves bit within BIT segment
0001             14            
01DD             15   CSEG              ; Absoulte CODE segments at fixed memory locations
01DD             16            myLUT:        ; Look-up table for 7-seg displays
01DD C0F9A4B0    17       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H        ; 0 TO 4
     99
01E2 9282F880    18       DB 092H, 082H, 0F8H, 080H, 090H        ; 4 TO 9
     90
01E7 8883C6A1    19       DB 088H, 083H, 0C6H, 0A1H, 086H, 08EH  ; A to F
     868E
01ED             20            T_7seg:       ; Look-up table for 7-seg displays. 
01ED 40792430    21       DB 40H, 79H, 24H, 30H, 19H
     19
01F2 12027800    22       DB 12H, 02H, 78H, 00H, 10H
     10
01F7             23   
01F7             24   ; An unsigned 16-bit number results in a 5-digit BCD number.
01F7             25   ; Use HEX0 to HEX4 to display it
01F7             26   Display:
01F7 75977F      27            MOV 97H, #7FH ;Turns HEX off after Student Number
01FA 75967F      28            MOV 96H, #7FH
01FD 758F7F      29            MOV 8FH, #7FH
0200             30            
0200 9001DD      31            mov dptr, #myLUT   ;Moves values from LUT to dptr
0203             32            ; Display Digit 0
0203 E534        33       mov A, bcd+0       ;Takes the first two BCD digits
0205 540F        34       anl a, #0fh        ;ANDs with 1111B (15D)
0207 93          35       movc A, @A+dptr    ;Picks the n-th byte of LUT, moves to acc
0208 F591        36       mov HEX0, A        ;Displays a digit on the HEX Display
020A             37            ; Display Digit 1
020A E534        38       mov A, bcd+0
020C C4          39       swap a
020D 540F        40       anl a, #0fh
020F 93          41       movc A, @A+dptr
0210 F592        42       mov HEX1, A
0212             43            ; Display Digit 2
0212 E535        44       mov A, bcd+1
0214 540F        45       anl a, #0fh
0216 93          46       movc A, @A+dptr
0217 F593        47       mov HEX2, A
0219             48            ; Display Digit 3
0219 E535        49       mov A, bcd+1
021B C4          50       swap a
021C 540F        51       anl a, #0fh
021E 93          52       movc A, @A+dptr
021F F594        53       mov HEX3, A
0221             54            ; Display Digit 4
0221 E536        55       mov A, bcd+2
0223 540F        56       anl a, #0fh
0225 93          57       movc A, @A+dptr
0226 F58E        58       mov HEX4, A
0228 22          59       ret 
0229             60            
0229             61   Shift_Digits:
0229 7804        62            mov R0, #4 ; shift left four bits
022B             63   Shift_Digits_L0:
022B C3          64            clr c          ;Clears carry
022C E534        65            mov a, bcd+0
022E 33          66            rlc a          ;Shifts the bits of acc to the left, leftmost loaded to carry
022F F534        67            mov bcd+0, a
0231 E535        68            mov a, bcd+1
0233 33          69            rlc a
0234 F535        70            mov bcd+1, a
0236 E536        71            mov a, bcd+2
0238 33          72            rlc a
0239 F536        73            mov bcd+2, a
023B D8EE        74            djnz R0, Shift_Digits_L0
023D             75            ; R7 has the new bcd digit      
023D EF          76            mov a, R7
023E 4534        77            orl a, bcd+0
0240 F534        78            mov bcd+0, a
0242             79            ; make the four most significant bits of bcd+2 zero
0242 E536        80            mov a, bcd+2
0244 540F        81            anl a, #0fH
0246 F536        82            mov bcd+2, a
0248 22          83            ret
0249             84   
0249             85   Wait50ms:
0249             86   ;33.33MHz, 1 clk per cycle: 0.03us
0249 781E        87            mov R0, #30
024B 794A        88   L3: mov R1, #74
024D 7AFA        89   L2: mov R2, #250
024F DAFE        90   L1: djnz R2, L1 ;3*250*0.03us=22.5us
0251 D9FA        91       djnz R1, L2 ;74*22.5us=1.665ms
0253 D8F6        92       djnz R0, L3 ;1.665ms*30=50ms
0255 22          93       ret
0256             94   
0256             95   ; Check if SW0 to SW15 are toggled up.  Returns the toggled switch in
0256             96   ; R7.  If the carry is not set, no toggling switches were detected.
0256             97   ReadNumber:
0256 ACE8        98            mov r4, SWA ; Read switches 0 to 7
0258 AD95        99            mov r5, SWB ; Read switches 8 to 15
025A EC         100            mov a, r4
025B 4D         101            orl a, r5
025C 6029       102            jz ReadNumber_no_number
025E 120249     103            lcall Wait50ms ; debounce
0261 E5E8       104            mov a, SWA
0263 C3         105            clr c
0264 9C         106            subb a, r4
0265 7020       107            jnz ReadNumber_no_number ; it was a bounce
0267 E595       108            mov a, SWB
0269 C3         109            clr c
026A 9D         110            subb a, r5
026B 701A       111            jnz ReadNumber_no_number ; it was a bounce
026D 7F10       112            mov r7, #16 ; Loop counter
026F            113   ReadNumber_L0:
026F C3         114            clr c
0270 EC         115            mov a, r4
0271 33         116            rlc a
0272 FC         117            mov r4, a
0273 ED         118            mov a, r5
0274 33         119            rlc a
0275 FD         120            mov r5, a
0276 4004       121            jc ReadNumber_decode
0278 DFF5       122            djnz r7, ReadNumber_L0
027A 800B       123            sjmp ReadNumber_no_number       
027C            124   ReadNumber_decode:
027C 1F         125            dec r7
027D D3         126            setb c
027E            127   ReadNumber_L1:
027E E5E8       128            mov a, SWA
0280 70FC       129            jnz ReadNumber_L1
0282            130   ReadNumber_L2:
0282 E595       131            mov a, SWB
0284 70FC       132            jnz ReadNumber_L2
0286 22         133            ret
0287            134   ReadNumber_no_number:
0287 C3         135            clr c
0288 22         136            ret
0289            137            
0289            138   StudentNumber:     ;NOTE: Does not turn off HEX 5-7, Display does
0289 759730     139            MOV 97H, #30H  ;Displays "3"
028C 759640     140            MOV 96H, #40H  ;Displays "0"
028F 758F12     141            MOV 8FH, #12H  ;Displays "5"
0292 758E12     142            MOV 8EH, #12H  ;Displays "5"
0295 759440     143            MOV 94H, #40H  ;Displays "0"
0298 759379     144            MOV 93H, #79H  ;Displays "1"
029B 759224     145            MOV 92H, #24H  ;Displays "2"
029E 759130     146            MOV 91H, #30H  ;Displays "3"
02A1 7B28       147            MOV R3, #40
02A3 120249     148   L4:      LCALL Wait50ms ;Waits 2 seconds
02A6 DBFB       149            DJNZ R3,L4
02A8 22         150            RET
02A9            151   key1_is_zero:               ; Prevents x being set to zero while button is held down
02A9 30F9FD     152            jnb KEY.1, key1_is_zero ; Loop while the button is pressed
02AC 22         153            ret     
02AD            154   key2_is_zero:               ; Prevents x being set to zero while button is held down
02AD 30FAFD     155            jnb KEY.2, key2_is_zero ; Loop while the button is pressed
02B0 22         156            ret
02B1            157   key3_is_zero:               ; Prevents x being set to zero while button is held down
02B1 30FBFD     158            jnb KEY.3, key3_is_zero ; Loop while the button is pressed
02B4 22         159            ret
02B5            160   m_switch_is_one:            ; Prevents x being set to zero while switch is up
02B5 E59E       161            mov a, SWC
02B7 5402       162            anl a, #10B             ; Loop while switch is up
02B9 70FA       163            jnz m_switch_is_one
02BB 22         164            ret
02BC            165   d_switch_is_one:            ; Prevents x being set to zero while switch is up
02BC E59E       166            mov a, SWC
02BE 5401       167            anl a, #01B             ; Loop while switch is up
02C0 70FA       168            jnz d_switch_is_one
02C2 22         169            ret
02C3            170   Operations:
02C3 30FB3C     171            jnb KEY.3, Addition             ; Waits for Key3 before jump
02C6 30FA43     172            jnb KEY.2, Subtraction  ; Waits for Key2 before jump
02C9 30F91A     173            jnb KEY.1, Equals       ; Waits for Key1 before jump
02CC            174            
02CC E59E       175            mov a, SWC
02CE 5402       176            anl a, #10B             ; Takes the AND to determine if Switch 17 is on
02D0 7044       177            jnz Multiplication      ; Jumps if the acc is not zero
02D2 E59E       178            mov a, SWC
02D4 5401       179            anl a, #01B             ; Takes the AND to determine if Switch 16 is on
02D6 7048       180            jnz Division            ; Jumps if the acc is not zero
02D8 22         181            ret
02D9            182   Store:
02D9 12004E     183            lcall bcd2hex           ; Numerand1 in x
02DC 1201C9     184            lcall copy_xy           ; Numerand1 in y
02DF 12036A     185            lcall ClearDisplay
02E2 1201F7     186            lcall Display
02E5 22         187            ret
02E6            188   Equals:
02E6 1202A9     189            lcall key1_is_zero   ; Waits for Key1 to be pressed
02E9 7401       190            mov a,#1H            ; If type is 1H, the AND jumps to AdditionOP
02EB 5537       191            ANL a, type          ; AND compares bit by bit
02ED 703B       192            jnz AdditionOP
02EF 7402       193            mov a,#2H            ; If type is 2H, the AND jumps to SubtractionOP
02F1 5537       194            ANL a, type
02F3 7045       195            jnz SubtractionOP
02F5 7404       196            mov a,#4H            ; If type is 4H, the AND jumps to MultiplicationOP
02F7 5537       197            ANL a, type          
02F9 704F       198            jnz MultiplicationOP
02FB 7408       199            mov a,#8H            ; If type is 8H, the AND jumps to DivisionOP
02FD 5537       200            ANL a, type
02FF 7059       201            jnz DivisionOP
0301 22         202            ret
0302            203   Addition:
0302 1202D9     204            lcall Store          ; Stores the next digit in y
0305 1202B1     205            lcall key3_is_zero
0308 753701     206            mov type, #1H        ; Sets type to 1H for "+" identification
030B 22         207            ret
030C            208   Subtraction:
030C 1202D9     209            lcall Store
030F 1202AD     210            lcall key2_is_zero
0312 753702     211            mov type, #2H        ; Sets type to 2H for "-" identification
0315 22         212            ret
0316            213   Multiplication:
0316 1202D9     214            lcall Store
0319 1202B5     215            lcall m_switch_is_one
031C 753704     216            mov type, #4H        ; Sets type to 4H for "x" identification
031F 22         217            ret
0320            218   Division:
0320 1202D9     219            lcall Store
0323 1202BC     220            lcall d_switch_is_one
0326 753708     221            mov type, #8H        ; Sets type to 8H for "/" identification
0329 22         222            ret
032A            223   AdditionOP:
032A 12004E     224            lcall bcd2hex ; numerand2 a in x
032D 1201D0     225            lcall xchg_xy ; exchange x and y
0330 12008B     226            lcall add16
0333 120003     227            lcall hex2bcd ; convert 16 bit answer
0336 1201F7     228            lcall display
0339 22         229            ret
033A            230   SubtractionOP:
033A 12004E     231            lcall bcd2hex ; numerand2 a in x
033D 1201D0     232            lcall xchg_xy ; exchange x and y
0340 1200A0     233            lcall sub16
0343 120003     234            lcall hex2bcd ; convert 16 bit answer
0346 1201F7     235            lcall display
0349 22         236            ret
034A            237   MultiplicationOP:
034A 12004E     238            lcall bcd2hex ; numerand2 a in x
034D 1201D0     239            lcall xchg_xy ; exchange x and y
0350 12010C     240            lcall mul16
0353 120003     241            lcall hex2bcd ; convert 16 bit answer
0356 1201F7     242            lcall display
0359 22         243            ret
035A            244   DivisionOP:
035A 12004E     245            lcall bcd2hex ; numerand2 a in x
035D 1201D0     246            lcall xchg_xy ; exchange x and y
0360 120188     247            lcall div16
0363 120003     248            lcall hex2bcd ; convert 16 bit answer
0366 1201F7     249            lcall display
0369 22         250            ret
036A            251   ClearDisplay:
036A E4         252            clr a
036B F534       253            mov bcd+0, a  ;bcd+0 is an 8-bit value, but 2 bcd digits
036D F535       254            mov bcd+1, a
036F F536       255            mov bcd+2, a
0371 759140     256            mov HEX0,#40H ;Displays "0"
0374 759240     257            mov HEX1,#40H
0377 759340     258            mov HEX2,#40H
037A 759440     259            mov HEX3,#40H
037D 758E40     260            mov HEX4,#40H
0380 22         261            ret
0381            262                    
0381            263   mycode:
0381 75817F     264            mov SP, #7FH    ;Initializes the Stack pointer, set high
0384 E4         265            clr a
0385 F5E8       266            mov LEDRA, a    ;Next 4 lines turn off LEDs
0387 F595       267            mov LEDRB, a
0389 F59E       268            mov LEDRC, a
038B F5F8       269            mov LEDG, a
038D F534       270            mov bcd+0, a
038F F535       271            mov bcd+1, a
0391 F536       272            mov bcd+2, a
0393 120289     273            lcall StudentNumber
0396 1201F7     274            lcall Display
0399            275   
0399            276   forever:
0399 1202C3     277            lcall Operations ;Check if user is done inputting a number
039C 120256     278            lcall ReadNumber
039F 50F8       279            jnc forever
03A1 120229     280            lcall Shift_Digits
03A4 1201F7     281            lcall Display
03A7 020399     282            ljmp forever
03AA            283   en
